parameters:
- name: runTests
  type: boolean
  default: true

- name: runDeviceTests
  type: boolean
  default: true

- name: isPR
  type: boolean
  default: false

- name: vsdropsPrefix
  type: string

- name: keyringPass
  type: string

- name: gitHubToken
  type: string

- name: xqaCertPass
  type: string

steps:
- checkout: self          # https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema#checkout
  clean: true             # Executes: git clean -ffdx && git reset --hard HEAD
  submodules: recursive

- checkout: maccore
  clean: true
  persistCredentials: true  # hugely important, else there are some scripts that check a single file from maccore that will fail

- checkout: templates
  clean: true

- checkout: release-scripts
  clean: true

- pwsh: |
    # should we need sudo, no, but someone did something wrong in the images..
    sudo rm -Rf "$HOME/.git-credentials"
    git config --global credential.helper store
    Set-Content -Path "$HOME/.git-credentials" -Value "https://$(GitHub.Token):x-oauth-basic@github.com`n" -NoNewline

    # maccore is special, we use fetch there in some bash scripts, but VSTS uses https.. and some pools don't like the above.. :/
    cd $(System.DefaultWorkingDirectory)/maccore
    git remote remove origin
    git remote add origin https://$(GitHub.Token)@github.com/xamarin/maccore.git
    git remote # don't add -v else we see the pat
  displayName: 'Clean git mess from VSTS'

- powershell: |
    Write-Host "IsMacOS: ${IsMacOS}"
    Write-Host "IsWindows: ${IsWindows}"
    Write-Host "IsLinux: ${IsLinux}"

    if ($IsMacOS -or $IsLinux) {
        Write-Host "HOSTNAME: $(hostname)"
    } else {
        Write-Host "COMPUTERNAME: ${env:COMPUTERNAME}"
    }

    gci env: | format-table -autosize -wrap
  displayName: 'Show Environment'

- powershell: |
    Write-Host "Python version"
    python --version

    Write-Host "Python location"
    which python

    Write-Host "Python2 location"
    which python2

    Write-Host "Python3 location"
    which python3

    Write-Host "Pip3 version"
    pip3 -V
  displayName: 'Show Python information'

- bash: $(System.DefaultWorkingDirectory)/xamarin-macios/tools/devops/automation/scripts/bash/clean-bot.sh
  displayName: 'Clean bot'
  env:
    BUILD_REVISION: 'jenkins'
  continueOnError: true

- bash: |
    security set-key-partition-list -S apple-tool:,apple: -s -k $OSX_KEYCHAIN_PASS login.keychain
  env:
    OSX_KEYCHAIN_PASS: $(OSX_KEYCHAIN_PASS)
  displayName: 'Remove security UI-prompt (http://stackoverflow.com/a/40039594/183422)'
  condition: succeededOrFailed() # we do not care about the previous process cleanup

- template: install-certificates.yml@templates
  parameters:
    DeveloperIdApplication: $(developer-id-application)
    DeveloperIdInstaller: $(developer-id-installer)
    IphoneDeveloper: $(iphone-developer)
    MacDeveloper: $(mac-developer)
    HostedMacKeychainPassword: $(OSX_KEYCHAIN_PASS)

- task: xamops.azdevex.provisionator-task.provisionator@2
  displayName: 'Provision Brew components'
  inputs:
    provisioning_script: $(Build.SourcesDirectory)/xamarin-macios/tools/devops/provision-brew-packages.csx
    provisioning_extra_args: '-vvvv'
  timeoutInMinutes: 30
  enabled: true

- bash: |
    make -C $(Build.SourcesDirectory)/xamarin-macios/tools/devops build-provisioning.csx
  displayName: 'Generate provisionator files.'

- task: xamops.azdevex.provisionator-task.provisionator@1
  displayName: 'Provision Products & Frameworks'
  inputs:
    provisioning_script: $(Build.SourcesDirectory)/xamarin-macios/tools/devops/build-provisioning.csx
    provisioning_extra_args: '-vvvv'
  timeoutInMinutes: 250

- bash: |
    set -x
    set -e
    $(Build.SourcesDirectory)/xamarin-macios/system-dependencies.sh --provision-simulators
  displayName: 'Provision simulators'

- bash: |
    set -x
    sudo rm -Rf /Developer/MonoTouch
    sudo rm -Rf /Library/Frameworks/Xamarin.iOS.framework
    sudo rm -Rf /Library/Frameworks/Xamarin.Mac.framework
  displayName: 'Delete library folders'
  timeoutInMinutes: 5

- bash:
    set -x
    set -e
    rm -Rvf $(Build.SourcesDirectory)/package
    time make -C $(Build.SourcesDirectory)/xamarin-macios/ git-clean-all
  displayName: 'Clear results directory'
  timeoutInMinutes: 5

# Use the env variables that were set by the label parsing in the configure step
# print some useful logging to allow to know what is going on AND allow make some
# choices, there are labels that contradict each other (skip-package vs build-packages)
# we use warnings for those case we are not sure about.
- pwsh: |
    # we have a number of scripts that require to be executed from the top of the src, rather
    # than keeping track of the location of the script, we create two env vars that can be used to
    # get to the top
    $configVars = @{} # var name/value pair, later print twice, to process and debug

    $xamTop = "$(Build.SourcesDirectory)/xamarin-macios/"
    Write-Host "##vso[task.setvariable variable=XAM_TOP]$xamTop"

    $maccoreTop = "$(Build.SourcesDirectory)/maccore/"
    Write-Host "##vso[task.setvariable variable=MACCORE_TOP]$maccoreTop"

    $buildReason = "$(Build.Reason)"
    $buildSourceBranchName = "$(Build.SourceBranchName)"

    # decide if we are dealing with a PR or a re-triggered PR or a build from
    # a branch in origin

    if ($buildReason -eq "PullRequest" -or (($buildReason -eq "Manual" -or $buildReason -eq "IndividualCI") -and ($buildSourceBranchName -eq "merge")) ) {
      $configVars.Add("IsPR", "True")

      if ([string]::IsNullOrEmpty($Env:ghprbPullId)) {
        $configVars.Add("PrID", $Env:ghprbPullId)
      } else {
        $configVars.Add("PrID", "")
      }


      if ($Env:BuildPackage -eq "True") {
        $configVars.Add("BuildPkgs", "True")
      } else {
        $configVars.Add("BuildPkgs", "False")
      }

      # interesting case, we have build-pkg and skip-pkg... if that is the case, we build it, but we set a warning
      if ($Env:BuildPackage -eq "True" -and $Env:SkipPackages -eq "True") {
        Write-Host "##vso[task.logissue type=warning]'build-package' and 'skip-packages' are both present. Building packages in case of a doubt."
        $configVars.Add("BuildPkgs", "True")
      }

      # if we want to have device tests, we do need the pkgs so that we can fwd them to the device tests
      if ($Env:TriggerDeviceTests -eq "True") {
        $configVars.Add("BuildPkgs", "True")
        $configVars.Add("RunDeviceTests", "True")
      }

      if ($Env:SkipNugets -eq "True") {
        $configVars.Add("BuildNugets", "False")
      } else {
        $configVars.Add("BuildNugets", "True")
      }

      if ($Env:SkipSigning -eq "True") {
        $configVars.Add("SignPkgs", "False")
      } else {
        $configVars.Add("SignPkgs", "True")
      }

      if ($Env:SkipExternalTests -eq "True") {
        $configVars.Add("RunExternalTests", "False")
      } else {
        $configVars.Add("RunExternalTests", "True")
      }

      if ($Env:SkipPackagedXamarinMacTests -eq "True") {
        $configVars.Add("RunMacTests", "False")
      } else {
        $configVars.Add("RunMacTests", "True")
      }

      if ($Env:SkipPublicJenkins -eq "True") {
        $configVars.Add("SkipPublicJenkins", "True")
      } else {
        $configVars.Add("SkipPublicJenkins", "False")
      }

      $configVars.Add("RunSampleTests", $Env:RunSampleTests)
      $configVars.Add("RunInternalTests", $Env:RunInternalTests)

    } else {
      # set the defaults, all the things! o/
      $configVars.Add("IsPR", "False")

      # build pkg, nugets and sign them
      $configVars.Add("BuildPkgs", "True")
      $configVars.Add("BuildNugets", "True")
      $configVars.Add("SignPkgs", "True")

      # tests, run all of them, internal, external, mac but not sample tests
      $configVars.Add("RunInternalTests", "True")
      $configVars.Add("RunExternalTests", "True")
      $configVars.Add("RunMacTests", "True")
      $configVars.Add("RunSampleTests", "False")
      $configVars.Add("SkipPublicJenkins", "False")

      # if a developer decided to trigger one without device tests, allow it
      if ($Env:RUN_DEVICE_TESTS -eq "true") {
        $configVars.Add("RunDeviceTests", "True")
      } else {
        $configVars.Add("RunDeviceTests", "False")
      }
    }
    # write debugging and process of the vars
    foreach($key in $configVars.Keys) {
      Write-Host "$key='$($configVars[$key])'"
      Write-Host "##vso[task.setvariable variable=$key;isOutput=true]$($configVars[$key])"
    }

  name: configuration
  displayName: "Parse PR labels"
  timeoutInMinutes: 5
  env:
    RUN_DEVICE_TESTS: '${{ parameters.runDeviceTests }}'

- bash: |
    set -x
    set -e

    if [[ "$IsPR" == "True" ]]; then
      echo "Xamarin private packages NOT configured. Building a PR."
      CONFIGURE_FLAGS=""
    else
      echo "Xamarin private packages configured."
      CONFIGURE_FLAGS="--enable-xamarin"
    fi

    CONFIGURE_FLAGS="$CONFIGURE_FLAGS --enable-dotnet --enable-dotnet-windows --enable-install-source"

    cd $(Build.SourcesDirectory)/xamarin-macios/
    ./configure $CONFIGURE_FLAGS
    echo $(cat $(Build.SourcesDirectory)/xamarin-macios/configure.inc)
  env:
    IsPR: $(configuration.IsPR)
  displayName: "Configure build"
  timeoutInMinutes: 5

# Actual build of the project
- bash: |
    set -x
    set -e
    time make -C $(Build.SourcesDirectory)/xamarin-macios/ reset
    time make -C $(Build.SourcesDirectory)/xamarin-macios/ all -j8
    time make -C $(Build.SourcesDirectory)/xamarin-macios/ install -j8
  displayName: 'Build'
  timeoutInMinutes: 180

# build not signed .pkgs for the SDK
- bash: |
    set -x
    set -e
    rm -Rf $(Build.SourcesDirectory)/package/*.pkg
    rm -Rf $(Build.SourcesDirectory)/package/notarized/*.pkg
    time make -C $(Build.SourcesDirectory)/xamarin-macios/ package
  name: packages
  displayName: 'Build Packages'
  condition: and(succeeded(), contains(variables['configuration.BuildPkgs'], 'True'))
  timeoutInMinutes: 180

# build nugets
- template: build-nugets.yml

# only sign an notarize in no PR executions
- ${{ if ne(parameters.isPR, 'True') }}:
  - template: sign-and-notarized.yml

- template: generate-workspace-info.yml@templates
  parameters:
    GitHubToken: $(GitHub.Token)
    ArtifactDirectory: $(Build.SourcesDirectory)/package-internal

# upload each of the pkgs into the pipeline artifacts
- task: PublishPipelineArtifact@1
  displayName: 'Publish Build Artifacts'
  inputs:
    targetPath: $(Build.SourcesDirectory)/package
    artifactName: package
  continueOnError: true

- task: PublishPipelineArtifact@1
  displayName: 'Publish Build Internal Artifacts'
  inputs:
    targetPath: $(Build.SourcesDirectory)/package-internal
    artifactName: package-internal
  continueOnError: true

# funny enough we need these profiles to build the mac tests
- bash: |
    set -x
    set -e

    cd "$SOURCES_DIR/maccore/tools/"
    ./install-qa-provisioning-profiles.sh -v
  displayName: 'Add tests provisioning profiles'
  timeoutInMinutes: 30
  continueOnError: true # should not stop the build will result in test failures but we do want the pkg
  env:
    AUTH_TOKEN_GITHUB_COM: ${{ parameters.gitHubToken }}
    AUTH_TOKEN_LA_DEV_APPLE_P12: ${{ parameters.xqaCertPass }}
    AUTH_TOKEN_LA_DISTR_APPLE_P12: ${{ parameters.xqaCertPass }}
    AUTH_TOKEN_LA_MAC_INSTALLER_DISTR_P12: ${{ parameters.xqaCertPass }}
    AUTH_TOKEN_VSENG_XAMARIN_MAC_DEVICES_P12: ${{ parameters.xqaCertPass }}
    AUTH_TOKEN_VSENG_XAMARIN_MAC_DEVICES_2_P12: ${{ parameters.xqaCertPass }}
    SOURCES_DIR: $(Build.SourcesDirectory)

- bash: |
    set -x
    set -e

    make -C $(Build.SourcesDirectory)/xamarin-macios/tests package-tests
  displayName: 'Package Xamarin.mac tests'
  condition: and(succeeded(), contains(variables['configuration.RunMacTests'], 'True'))
  continueOnError: true # not a terrible blocking issue

- task: PublishPipelineArtifact@1
  displayName: 'Publish Xamarin.Mac tests'
  inputs:
    targetPath: $(Build.SourcesDirectory)/xamarin-macios/tests/mac-test-package.7z
    artifactName: mac-test-package
  condition: and(succeeded(), contains(variables['configuration.RunMacTests'], 'True'))
  continueOnError: true

- template: api-diff.yml

- bash: |
    set -x
    set -e
    echo "Running tests on $AGENT_NAME"
    echo "##vso[task.setvariable variable=TESTS_BOT;isOutput=true]$AGENT_NAME"

    echo "##vso[task.setvariable variable=TESTS_RAN;isOutput=true]True"
    rm -rf ~/.config/.mono/keypairs/

    if [[ "$IsPR" == "True" ]]; then
      TARGET='jenkins'
    else
      TARGET='wrench-jenkins'
    fi

    echo "Using target '$TARGET'"

    RC=0
    make -C $(Build.SourcesDirectory)/xamarin-macios/tests "$TARGET" || RC=$?

    if [ $RC -eq 0 ]; then
      echo "##vso[task.setvariable variable=TESTS_JOBSTATUS;isOutput=true]Succeeded"
    else
      echo "##vso[task.setvariable variable=TESTS_JOBSTATUS;isOutput=true]Failed"
    fi

    if test -f "$(Build.SourcesDirectory)/xamarin-macios//jenkins/failure-stamp"; then
      echo "Something went wrong:"
      cat "$(Build.SourcesDirectory)/xamarin-macios//jenkins/pr-comments.md"
      exit 1
    fi
  displayName: 'Run tests'
  name: runTests # not to be confused with the displayName, this is used to later use the name of the step to access the output variables from an other job
  timeoutInMinutes: 600
  enabled: ${{ parameters.runTests }}
  env:
    IsPR: $(configuration.IsPR)
    PrID: $(configuration.PrID)
    GITHUB_TOKEN: $(GitHub.Token)  # used to filter the tests to be ran
    BUILD_REVISION: jenkins
    VSDROPS_URI: '${{ parameters.vsdropsPrefix }}/$(Build.BuildNumber)/$(Build.BuildId)/sim;/tests/' # uri used to create the vsdrops index using full uri


# Only executed when the tests failed, that means that we did have a timeout, and we could not set the status, this
# later results on an error when publishing the results, if we timeout, we ensure we set the needed vars
- bash: |
    echo "##vso[task.setvariable variable=TESTS_JOBSTATUS;isOutput=true]Failed"
  displayName: 'On tests timeout'
  condition: failed()

# Upload TestSummary as an artifact.
- task: PublishPipelineArtifact@1
  displayName: 'Publish Artifact: TestSummary'
  inputs:
    targetPath: 'xamarin-macios/tests/TestSummary.md'
    artifactName: TestSummary-sim
  continueOnError: true
  condition: and(succeededOrFailed(), contains(variables['runTests.TESTS_RAN'], 'True')) # if tests did not run, there is nothing to do

- pwsh: |
    $summaryName = "TestSummary.md"
    $summaryPath = "$Env:SYSTEM_DEFAULTWORKINGDIRECTORY/xamarin-macios/tests/TestSummary.md"
    Write-Host "##vso[task.addattachment type=Distributedtask.Core.Summary;name=$summaryName;]$summaryPath"
  displayName: Set TestSummary
  condition: and(succeededOrFailed(), contains(variables['runTests.TESTS_RAN'], 'True')) # if tests did not run, there is nothing to do

# Archive files for the Html Report so that the report can be easily uploaded as artifacts of the build.
- task: ArchiveFiles@1
  displayName: 'Archive HtmlReport'
  inputs:
    rootFolder: 'xamarin-macios/jenkins-results'
    includeRootFolder: false
    archiveFile: '$(Build.ArtifactStagingDirectory)/HtmlReport.zip'
  continueOnError: true
  condition: and(succeededOrFailed(), contains(variables['runTests.TESTS_RAN'], 'True')) # if tests did not run, there is nothing to do

# Create HtmlReport artifact. This serves two purposes:
# 1. It is the way we are going to share the HtmlReport with the publish_html job that is executed on a Windows machine.
# 2. Users can download this if they want.
- task: PublishPipelineArtifact@1
  displayName: 'Publish Artifact: HtmlReport'
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)/HtmlReport.zip'
    artifactName: HtmlReport-sim
  continueOnError: true
  condition: and(succeededOrFailed(), contains(variables['runTests.TESTS_RAN'], 'True')) # if tests did not run, there is nothing to do

# this will always be executed, is the default condition in the template
- template: uninstall-certificates/v1.yml@templates
  parameters:
    HostedMacKeychainPassword: $(OSX_KEYCHAIN_PASS)

- pwsh: |
    # should we need sudo, no, but someone did something wrong in the images..
    sudo rm -Rf "$HOME/.git-credentials"
  displayName: 'Remove git creds store'
  condition: always()
