# Job that will download the other artifact from the tests job and will publish them in the 
# vsdrops

###########################################################
# WARNING WARNING WARNING WARNING WARNING WARNING WARNING #
###########################################################

# This job is executed on WINDOWS! make sure you DO NOT USE
# bash or linux file paths on scripts. Another important
# details is that System.DefaultWorkingDirectory
# on mac os x points on the top dir while on windows 
# is the checked out dir

parameters:

- name: statusContext
  type: string 
  default: 'iOS Device Tests' # default context, since we started dealing with iOS devices. 

- name: vsdropsPrefix
  type: string

- name: devicePrefix
  type: string 
  default: 'ios' # default context, since we started dealing with iOS devices. 

- name: provisioningFailed
  type: string 
  default: 'False'

steps:

- checkout: self
  persistCredentials: true

- ${{ if eq(parameters.provisioningFailed, 'False') }}:
  - template: download-artifacts.yml 
    parameters:
      devicePrefix: ${{ parameters.devicePrefix }}

  # Use the cmdlet to post a new summary comment. The cmdlet checks if we have the TestSummary.md file or not. It will also add the appropriate links to the comment. 
  # this step uses variables that have been set by the tests job dependency via output variables, those variables contain if the xamarin-storage could be used and its path
  - powershell: |
      $env:VSDROPS_INDEX="$Env:VSDROPSPREFIX/$Env:BUILD_BUILDNUMBER/$Env:BUILD_BUILDID/$Env:DEVICE_PREFIX/;/tests/vsdrops_index.html"
      Import-Module $Env:SYSTEM_DEFAULTWORKINGDIRECTORY\xamarin-macios\tools\devops\automation\scripts\GitHub.psm1 
      Import-Module $Env:SYSTEM_DEFAULTWORKINGDIRECTORY\xamarin-macios\tools\devops\automation\scripts\VSTS.psm1 
      $response = New-GitHubSummaryComment -Context "$Env:CONTEXT" -TestSummaryPath "$Env:TESTS_SUMMARY"
      Write-Host $response
      if($Env:TESTS_JOBSTATUS -ne "Succeeded")
      {
        Set-PipelineResult -Status partiallySucceeded
      }
    env:
      BUILD_REVISION: $(Build.SourceVersion)
      CONTEXT: ${{ parameters.statusContext }}
      DEVICE_PREFIX: ${{ parameters.devicePrefix }}
      GITHUB_TOKEN: $(GitHub.Token)
      TESTS_JOBSTATUS: $(TESTS_JOBSTATUS) # set by the runTests step
      TESTS_SUMMARY: $(TEST_SUMMARY_PATH)
      ACCESSTOKEN: $(System.AccessToken)
    displayName: 'Add summaries'
    condition: always()
    timeoutInMinutes: 1

- ${{ if ne(parameters.provisioningFailed, 'False') }}:
    - powershell: |
        Import-Module $Env:SYSTEM_DEFAULTWORKINGDIRECTORY\xamarin-macios\tools\devops\automation\scripts\GitHub.psm1 
        Import-Module $Env:SYSTEM_DEFAULTWORKINGDIRECTORY\xamarin-macios\tools\devops\automation\scripts\VSTS.psm1 
        $targetUrl = $Env:SYSTEM_TEAMFOUNDATIONCOLLECTIONURI + "$Env:SYSTEM_TEAMPROJECT/_build/index?buildId=$Env:BUILD_BUILDID&view=ms.vss-test-web.test-result-details"

        New-GitHubComment -Header "Tests were not ran ($Env:CONTEXT)." -Emoji ":warning:" -Description "Results were skipped for this run  due to provisioning problems [Azure Devops]($targetUrl). Please contact the bot administrator."
        Set-GitHubStatus -Status "error" -Description "Provisioning bot for tests failed." -Context "$(Build.DefinitionName) (Test run)"
      env:
        BUILD_REVISION: $(Build.SourceVersion)
        CONTEXT: ${{ parameters.statusContext }}
        GITHUB_TOKEN: $(GitHub.Token)
        ACCESSTOKEN: $(System.AccessToken)
      displayName: 'Add summaries'
      condition: always()
      timeoutInMinutes: 1
