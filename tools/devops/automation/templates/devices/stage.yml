# Main template that contains all the jobs that are required to run the device tests.
#
# The stage contains two different jobs
# 
# tests: Runs the tests on a pool that contains devices that are capable to run them.
# publish_html: Because vsdrop is not supported on macOS we have an extra job that
#   will run on a pool with Windows devices that will publish the results on VSDrop to
#   be browsable.

parameters:

# string that is used to identify the status to be used to expose the result on GitHub
- name: statusContext
  type: string 
  default: 'iOS Device Tests' # default context, since we started dealing with iOS devices. 

# string that contains the extra labels to pass to xharness to select the tests to execute.
- name: testsLabels
  type: string 
  default: '--label=run-ios-64-tests,run-non-monotouch-tests,run-monotouch-tests,run-mscorlib-tests' # default context, since we started dealing with iOS devices. 

# name of the pool that contains the iOS devices
- name: iOSDevicePool
  type: string
  default: 'VSEng-Xamarin-QA'

# demand that has to be matched by a bot to be able to run the tests.
- name: iOSDeviceDemand
  type: string
  default: 'xismoke' 

- name: useXamarinStorage
  type: boolean
  default: false

- name: vsdropsPrefix 
  type: string

- name: stageName 
  type: string

- name: keyringPass
  type: string

- name: execute
  type: string

- name: devicePrefix
  type: string
  default: 'ios' # default context, since we started dealing with iOS devices. 

stages:
- stage:
  displayName: ${{ parameters.stageName }}
  dependsOn:
  - build_packages
  # we need to have the pkgs built and the device sets to be ran, that is decided via the labels or type of build during the build_packages stage
  condition: and(succeeded(), eq(dependencies.build_packages.outputs['build.configuration.RunDeviceTests'], 'True'))
  jobs:
  - job: tests
    displayName: 'Run ${{ parameters.devicePrefix }} Device Tests'
    timeoutInMinutes: 1000
    pool:
      name: ${{ parameters.iOSDevicePool }}
      demands: ${{ parameters.iOSDeviceDemand }}
      workspace:
        clean: all
    steps:
    - template: build.yml
      parameters:
        testsLabels: ${{ parameters.testsLabels }}
        statusContext: ${{ parameters.statusContext }}
        useXamarinStorage: ${{ parameters.useXamarinStorage }}
        vsdropsPrefix: ${{ parameters.vsdropsPrefix }} 
        keyringPass: ${{ parameters.keyringPass }} 
        devicePrefix: ${{ parameters.devicePrefix }}

  - job: upload_vsdrops
    displayName: 'Upload report to vsdrops'
    timeoutInMinutes: 1000
    dependsOn: tests # can start as soon as the tests are done
    condition: succeededOrFailed()
    pool:
      vmImage: 'windows-latest'
      workspace:
        clean: all
    steps:
    - template: ../common/upload-vsdrops.yml
      parameters: 
        devicePrefix: ${{ parameters.devicePrefix }}
        provisioningFailed: $[ dependencies.tests.outputs['runTests.PROVISIONING_FAILED']

  - job: upload_vsts_tests
    displayName: 'Upload xml to vsts'
    timeoutInMinutes: 1000
    dependsOn: tests # can start as soon as the tests are done
    condition: succeededOrFailed()
    pool:
      vmImage: 'windows-latest'
      workspace:
        clean: all
    steps:
    - template: ../common/upload-vsts-tests.yml
      parameters: 
        devicePrefix: ${{ parameters.devicePrefix }}
        provisioningFailed: $[ dependencies.tests.outputs['runTests.PROVISIONING_FAILED']

  - job: publish_html
    displayName: 'Publish Html report in VSDrops'
    timeoutInMinutes: 1000
    dependsOn: # has to wait for the tests to be done AND the data to be uploaded
    - tests
    - upload_vsdrops
    - upload_vsts_tests 
    condition: succeededOrFailed()
    variables:
      # Define the variable FOO from the previous job
      # Note the use of single quotes!
      TESTS_BOT: $[ dependencies.tests.outputs['runTests.TESTS_BOT'] ]
      TESTS_JOBSTATUS: $[ dependencies.tests.outputs['runTests.TESTS_JOBSTATUS'] ]
    pool:
      vmImage: 'windows-latest'
      workspace:
        clean: all
    steps:
    - template: ../common/publish-html.yml
      parameters:
        statusContext: ${{ parameters.statusContext }}
        vsdropsPrefix: ${{ parameters.vsdropsPrefix }} 
        devicePrefix: ${{ parameters.devicePrefix }}
        provisioningFailed: $[ dependencies.tests.outputs['runTests.PROVISIONING_FAILED']
